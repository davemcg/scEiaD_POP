from snakemake.utils import min_version
min_version("7.0")


git_dir = config['git_dir'] 

def query_bcs(query):
	if query == '':
		out = ''
	else:
		out = "--query_csv " + query + " "
	return out

def scib_out(scib_config):
	if scib_config:
		out = '--scib ' + config['prefix'] + wildcards.hvg + "hvg_" + wildcards.epochs + "e_" + wildcards.latent + "l.scib.csv"
	else:
		out = ''
	return out

rule all:
	input:
		expand(config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.difftesting.{against}.csv.gz',
				hvg = config['hvg'],
				epochs = config['epochs'],
				latent = config['latent'],
				against = config['pb_group']), #['leiden3','MajorCellType', 'leiden5']),
		expand(config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.pseudoBulk.{against}.csv.gz',
				hvg = config['hvg'],
				epochs = config['epochs'],
				latent = config['latent'],
				against = config['pb_group']) #['leiden3','MajorCellType', 'leiden5'])

rule run_scvi:
	input:
		config['input_h5ad']
	output:
		obs = config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.obs.csv.gz',
		scib = config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.scib.csv'
	conda:
		"rscvi"
	params:
		query = lambda wildcards: query_bcs(config['query_bcs']),
		scanvi_on = config['scanvi_on'],
		scanvi_out = config['scanvi_out'],
		scib = lambda wildcards: scib_out(config['scib'])
	shell:
		"""
		python {git_dir}/workflow/scripts/run_scvi.py \
			{input} \
			{config[ref_bcs]} \
			{config[prefix]}{wildcards.hvg}hvg_{wildcards.epochs}e_{wildcards.latent}l \
			scviModel.{config[prefix]}_{wildcards.hvg}hvg_{wildcards.epochs}e_{wildcards.latent}l \
			{config[prefix]}{wildcards.hvg}hvg_{wildcards.epochs}e_{wildcards.latent}l.h5ad \
			{config[prefix]}{wildcards.hvg}hvg_{wildcards.epochs}e_{wildcards.latent}l.obs.csv.gz \
			{params.query} \
			--n_top_genes {wildcards.hvg} \
			--n_epochs {wildcards.epochs} \
			--n_latent {wildcards.latent} \
			--input_type barcode \
			--scanvi_model_out scanviModel.{config[prefix]}_{wildcards.hvg}hvg_{wildcards.epochs}e_{wildcards.latent}l \
			--scanvi_predict__on {params.scanvi_on} \
			--scanvi_predict__out {params.scanvi_out} \
			{params.scib}	
		"""
	
rule diff_testing:
	input:
		h5ad =  config['input_h5ad'],
		obs = config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.obs.csv.gz'
	output:
		config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.difftesting.{against}.csv.gz'
	conda:
		"rscvi"
	shell:
		"""
		python {git_dir}/workflow/scripts/diff_testing.py \
			{input} \
			{wildcards.against} \
			{output}
		"""
	
rule pseudo_bulk:
	input:
		h5ad = config['input_h5ad'],
		obs = config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.obs.csv.gz'
	output:
		config['prefix'] + '{hvg}hvg_{epochs}e_{latent}l.pseudoBulk.{against}.csv.gz'
	conda:
		"rscvi"
	shell:
		"""
		# python ~/git/scEiaD_modeling/workflow/scripts/make_pseudobulk.py hs111.adata.solo.2024_03_07.h5ad hs111_mature_alleye_5000hvg_50e_30l.obs.csv.gz MajorCellType hs111_mature_alleye.pseudodbulk.MajorCellType.csv.gz
		python {git_dir}/workflow/scripts/make_pseudobulk.py \
			{input} \
			{wildcards.against} \
			{output}
		"""
